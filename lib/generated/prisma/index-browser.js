
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
  Snapshot: 'Snapshot'
});

exports.Prisma.EFMigrationsHistoryScalarFieldEnum = {
  MigrationId: 'MigrationId',
  ProductVersion: 'ProductVersion'
};

exports.Prisma.AccessLogScalarFieldEnum = {
  Id: 'Id',
  CreatedDate: 'CreatedDate',
  UpdatedDate: 'UpdatedDate',
  RequestUrl: 'RequestUrl',
  RequestMethod: 'RequestMethod',
  RequestHeaders: 'RequestHeaders',
  RequestBody: 'RequestBody',
  ResponseHeaders: 'ResponseHeaders',
  ResponseBody: 'ResponseBody',
  ResponseCode: 'ResponseCode',
  RequestIp: 'RequestIp',
  RequestQuery: 'RequestQuery'
};

exports.Prisma.AppSurveyScalarFieldEnum = {
  Id: 'Id',
  Rating: 'Rating',
  PhoneNumber: 'PhoneNumber',
  AccomplishedDate: 'AccomplishedDate'
};

exports.Prisma.AspNetRoleClaimsScalarFieldEnum = {
  Id: 'Id',
  RoleId: 'RoleId',
  ClaimType: 'ClaimType',
  ClaimValue: 'ClaimValue'
};

exports.Prisma.AspNetRolesScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name',
  NormalizedName: 'NormalizedName',
  ConcurrencyStamp: 'ConcurrencyStamp'
};

exports.Prisma.AspNetUserClaimsScalarFieldEnum = {
  Id: 'Id',
  UserId: 'UserId',
  ClaimType: 'ClaimType',
  ClaimValue: 'ClaimValue'
};

exports.Prisma.AspNetUserLoginsScalarFieldEnum = {
  LoginProvider: 'LoginProvider',
  ProviderKey: 'ProviderKey',
  ProviderDisplayName: 'ProviderDisplayName',
  UserId: 'UserId'
};

exports.Prisma.AspNetUserRolesScalarFieldEnum = {
  UserId: 'UserId',
  RoleId: 'RoleId'
};

exports.Prisma.AspNetUsersScalarFieldEnum = {
  Id: 'Id',
  UserName: 'UserName',
  NormalizedUserName: 'NormalizedUserName',
  Email: 'Email',
  NormalizedEmail: 'NormalizedEmail',
  EmailConfirmed: 'EmailConfirmed',
  PasswordHash: 'PasswordHash',
  SecurityStamp: 'SecurityStamp',
  ConcurrencyStamp: 'ConcurrencyStamp',
  PhoneNumber: 'PhoneNumber',
  PhoneNumberConfirmed: 'PhoneNumberConfirmed',
  TwoFactorEnabled: 'TwoFactorEnabled',
  LockoutEnd: 'LockoutEnd',
  LockoutEnabled: 'LockoutEnabled',
  AccessFailedCount: 'AccessFailedCount',
  PasswordValidUntil: 'PasswordValidUntil',
  DeviceId: 'DeviceId',
  FcmToken: 'FcmToken',
  FullName: 'FullName'
};

exports.Prisma.AspNetUserTokensScalarFieldEnum = {
  UserId: 'UserId',
  LoginProvider: 'LoginProvider',
  Name: 'Name',
  Value: 'Value'
};

exports.Prisma.CardReplacementRequestsScalarFieldEnum = {
  RequestID: 'RequestID',
  CreatedDate: 'CreatedDate',
  UpdatedDate: 'UpdatedDate',
  PhoneNumber: 'PhoneNumber',
  OldFourDigits: 'OldFourDigits',
  NewFourDigits: 'NewFourDigits',
  IsCompleted: 'IsCompleted',
  DeviceId: 'DeviceId'
};

exports.Prisma.DetractorsFeedbackScalarFieldEnum = {
  Id: 'Id',
  Rating: 'Rating',
  PhoneNumber: 'PhoneNumber',
  Feedback: 'Feedback',
  AccomplishedDate: 'AccomplishedDate'
};

exports.Prisma.DeviceAccessLogScalarFieldEnum = {
  Id: 'Id',
  AccessDateTime: 'AccessDateTime',
  DeviceId: 'DeviceId',
  MobileNumber: 'MobileNumber',
  FullName: 'FullName'
};

exports.Prisma.DeviceCodesScalarFieldEnum = {
  UserCode: 'UserCode',
  DeviceCode: 'DeviceCode',
  SubjectId: 'SubjectId',
  ClientId: 'ClientId',
  CreationTime: 'CreationTime',
  Expiration: 'Expiration',
  Data: 'Data'
};

exports.Prisma.EwPayActivatedCardsScalarFieldEnum = {
  Id: 'Id',
  UCRN: 'UCRN',
  DateActivated: 'DateActivated'
};

exports.Prisma.EwPayIneligibleCardsScalarFieldEnum = {
  Id: 'Id',
  UCRN: 'UCRN',
  IsReported: 'IsReported',
  IsActivated: 'IsActivated',
  DateReported: 'DateReported'
};

exports.Prisma.InvalidDeviceAccessScalarFieldEnum = {
  Id: 'Id',
  AccessDateTime: 'AccessDateTime',
  DeviceId: 'DeviceId',
  MobileNumber: 'MobileNumber',
  Reason: 'Reason'
};

exports.Prisma.MastercardProvisionedTokensScalarFieldEnum = {
  TokenUniqueReferenceId: 'TokenUniqueReferenceId',
  PhoneNumber: 'PhoneNumber',
  DeviceId: 'DeviceId',
  PaymentAccountReference: 'PaymentAccountReference'
};

exports.Prisma.PersistedGrantsScalarFieldEnum = {
  Key: 'Key',
  Type: 'Type',
  SubjectId: 'SubjectId',
  ClientId: 'ClientId',
  CreationTime: 'CreationTime',
  Expiration: 'Expiration',
  Data: 'Data'
};

exports.Prisma.ProvisionedTokenIdsScalarFieldEnum = {
  Id: 'Id',
  ProvisionedTokenId: 'ProvisionedTokenId',
  PanEnrollmentId: 'PanEnrollmentId',
  TokenReferenceId: 'TokenReferenceId'
};

exports.Prisma.RegisterLogEntryScalarFieldEnum = {
  Id: 'Id',
  DeviceId: 'DeviceId',
  MobileNumber: 'MobileNumber',
  RegistrationDateTime: 'RegistrationDateTime'
};

exports.Prisma.SysdiagramsScalarFieldEnum = {
  name: 'name',
  principal_id: 'principal_id',
  diagram_id: 'diagram_id',
  version: 'version',
  definition: 'definition'
};

exports.Prisma.TapToPayTransactionLogScalarFieldEnum = {
  Id: 'Id',
  DeviceId: 'DeviceId',
  PhoneNumber: 'PhoneNumber',
  TransactionDate: 'TransactionDate'
};

exports.Prisma.TokenStatusesScalarFieldEnum = {
  ID: 'ID',
  Name: 'Name',
  CardProviderName: 'CardProviderName',
  IsSuspended: 'IsSuspended',
  IsDeleted: 'IsDeleted',
  IsActive: 'IsActive',
  IsInactive: 'IsInactive'
};

exports.Prisma.VisaProvisionedTokensScalarFieldEnum = {
  ProvisionedTokenId: 'ProvisionedTokenId',
  PhoneNumber: 'PhoneNumber',
  DeviceId: 'DeviceId',
  StatusId: 'StatusId',
  PanEnrollmentId: 'PanEnrollmentId'
};

exports.Prisma.VisaRequestsScalarFieldEnum = {
  Id: 'Id',
  CreatedDate: 'CreatedDate',
  UpdatedDate: 'UpdatedDate',
  RequestUrl: 'RequestUrl',
  RequestMethod: 'RequestMethod',
  RequestHeaders: 'RequestHeaders',
  RequestBody: 'RequestBody',
  ResponseHeaders: 'ResponseHeaders',
  ResponseBody: 'ResponseBody',
  ResponseCode: 'ResponseCode',
  RequestIp: 'RequestIp',
  RequestQuery: 'RequestQuery'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  EFMigrationsHistory: 'EFMigrationsHistory',
  AccessLog: 'AccessLog',
  AppSurvey: 'AppSurvey',
  AspNetRoleClaims: 'AspNetRoleClaims',
  AspNetRoles: 'AspNetRoles',
  AspNetUserClaims: 'AspNetUserClaims',
  AspNetUserLogins: 'AspNetUserLogins',
  AspNetUserRoles: 'AspNetUserRoles',
  AspNetUsers: 'AspNetUsers',
  AspNetUserTokens: 'AspNetUserTokens',
  CardReplacementRequests: 'CardReplacementRequests',
  DetractorsFeedback: 'DetractorsFeedback',
  DeviceAccessLog: 'DeviceAccessLog',
  DeviceCodes: 'DeviceCodes',
  EwPayActivatedCards: 'EwPayActivatedCards',
  EwPayIneligibleCards: 'EwPayIneligibleCards',
  InvalidDeviceAccess: 'InvalidDeviceAccess',
  MastercardProvisionedTokens: 'MastercardProvisionedTokens',
  PersistedGrants: 'PersistedGrants',
  ProvisionedTokenIds: 'ProvisionedTokenIds',
  RegisterLogEntry: 'RegisterLogEntry',
  sysdiagrams: 'sysdiagrams',
  TapToPayTransactionLog: 'TapToPayTransactionLog',
  TokenStatuses: 'TokenStatuses',
  VisaProvisionedTokens: 'VisaProvisionedTokens',
  VisaRequests: 'VisaRequests'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
